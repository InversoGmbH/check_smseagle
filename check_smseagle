#!/usr/bin/python

# Copyright (C) 2016  NETWAYS GmbH, https://netways.de
#
# Author: Alexander A. Klimov <alexander.klimov@netways.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


from argparse import ArgumentParser
from urllib.parse import urljoin, urlencode
import ssl
import sys
import urllib.request

__version__ = "1.0.0"

# Return code level
# 0 - OK       - The plugin was able to check the service and it appeared to be functioning properly
# 1 - WARNING  - The plugin was able to check the service, but it appeared to be above some "warning"
#                threshold or did not appear to be working properly
# 2 - CRITICAL - The plugin detected that either the service was not running or it was above some "critical" threshold
# 3 - UNKNOWN  - Invalid command line arguments were supplied to the plugin or low-level failures
OK = 0
WARNING = 1
CRITICAL = 2
UNKNOWN = 3

def generate_output(status='UNKNOWN', description=None, perfdata=None):
    """
    Generate plugin data output with status and perfdata
    """

    pluginoutput = str(status)

    if description:
        pluginoutput += ' - ' + str(description)

    # Perfdata we explicitly extracted from the data
    if perfdata:
        pluginoutput += '|' + ' '.join([key.lower().replace(" ", "_").replace(",", "") + '=' + str(value) for key, value in perfdata.items()])

    print(pluginoutput)

def commandline(args):
    """
    Parse commandline arguments.
    """
    parser = ArgumentParser(description= "check_smseagle (Version: %s)" % (__version__))

    parser.add_argument("-u", "--url", required=True,
                        help="URL to check")
    parser.add_argument("-U", "--user",
                        help="User for the login")
    parser.add_argument("-P", "--password",
                        help="Password for the login")
    parser.add_argument("-M", "--modem",
                        help="Modem ID")
    parser.add_argument("-w", "--warning", default=10, type=int,
                        help="Warning if the GSM signal strength is less than PERCENT. Must be greater then --critical")
    parser.add_argument("-c", "--critical", default=5, type=int,
                        help="Critical if the GSM signal strength is less than PERCENT")
    parser.add_argument("-T", "--timeout", help="Seconds before connection times out (default 10)",
                        default=10,
                        type=int)
    parser.add_argument("--insecure",
                        action="store_true",
                        default=False,
                        help="Allow insecure SSL connections (default False)")

    a = parser.parse_args(args)

    if a.critical > a.warning:
        print("UNKNOWN - The critical threshold must not be greater than the warning")
        sys.exit(3)

    return a

def get_data(url, timeout, insecure):
    """
    Requests the data via HTTP. Basically a wrapper around urllib.

    What we expect from the server:

    HTTP/1.0 200 OK
    que: foo
    failed: 0
    signal_strength: 15 db
    total: 25
    """

    # Default context for connection
    ctx = ssl.create_default_context()
    if insecure is True:
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE

    response = urllib.request.urlopen(url=url, timeout=timeout, context=ctx) # pylint: disable=consider-using-with

    if response.getcode() != 200:
        raise RuntimeError("Could not get response")

    resp = response.read().decode()
    return resp

def main(args):

    url = urljoin(args.url, '/index.php/http_api/get_gsmsignal')

    params = urlencode({
        'login': args.user,
        'pass': args.password,
        'modem_no': args.modem
    })

    url += "?%s" % params

    try:
        response = get_data(url=url, timeout=args.timeout, insecure=args.insecure)
    except Exception as data_exc: # pylint: disable=broad-except
        print("UNKNOWN - Couldn't fetch the GSM signal strength because of an error", data_exc)
        return UNKNOWN

    try:
        strength = int(response.strip())
    except ValueError as parse_exc:
        print("UNKNOWN - Couldn't evaluate the GSM signal strength", parse_exc)
        return UNKNOWN

    if strength == -1:
        generate_output("CRITICAL", 'GSM modem is disconnected from GSM network')
        return CRITICAL

    if strength < args.critical:
        exit_code = CRITICAL
        status = "CRITICAL"
    elif strength < args.warning:
        exit_code = WARNING
        status = "WARNING"
    else:
        exit_code = OK
        status = "OK"

    generate_output(status, f"GSM signal strength: {strength}%", {'gsm_signal_strenght': f"{strength}%;{args.warning}:;{args.critical}:;;"})
    return exit_code


if __name__ == '__main__': # pragma: no cover
    try:
        ARGS = commandline(sys.argv[1:])
        sys.exit(main(ARGS))
    except SystemExit:
        # Re-throw the exception
        raise sys.exc_info()[1].with_traceback(sys.exc_info()[2]) # pylint: disable=raise-missing-from
    except:
        print("UNKNOWN - Error: %s" % (str(sys.exc_info()[1])))
        sys.exit(3)
